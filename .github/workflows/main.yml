# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:

      - name: Delete Current Release
        uses: dev-drprasad/delete-tag-and-release@v0.1.2
        with:
          # tag name
          tag_name: latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: latest
          release_name: Release latest
          draft: false
          prerelease: true
  build-apple:
    # The type of runner that the job will run on
    runs-on: macos-11

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Go environment
        uses: actions/setup-go@v2.1.3
        with:
          # The Go version to download (if necessary) and use. Supports semver spec and ranges.
          go-version: 1.17.0

      - name: Install go stringer
        run: go get golang.org/x/tools/cmd/stringer@latest

      - name: Install dmg maker
        run: brew install create-dmg
      - name: Create Apple dmg asset
        run: make release-mac
      - name: get release
        id: get_release
        uses: cardinalby/git-get-release-action@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          latest: true
          draft: false
          prerelease: true
      - name: Upload Apple Release Asset
        id: upload-apple-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./phonon.dmg
          asset_name: phonon.dmg
          asset_content_type: application/octet-stream

  build-windows:
    runs-on: windows-latest

    defaults:
      run:
        shell: bash
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: install mingw
        run: |
          choco install mingw
      - name: Install go stringer
        run: |
          GOBIN=/usr/bin go install golang.org/x/tools/cmd/stringer@latest
      - name: Build Windows
        run: make windows-build

      - name: get release
        id: get_release
        uses: cardinalby/git-get-release-action@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          latest: true
          draft: false
          prerelease: true
      - name: Upluad Winodws Release Asset
        id: upload-windows-release-asset
        run: |
          gh release upload latest ./phonon.exe 
      
